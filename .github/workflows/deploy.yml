---
name: "demo-workflow"
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  cd:
    name: "ECS FARGATE Demo Deployment"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout Code"
        uses: "actions/checkout@v2"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: demoapp
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo $IMAGE_TAG
          cd Terraform
        terraform init
          terraform destroy -target aws_ecs_service.demo-ecs-service -auto-approve -input=false
          cd ../
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: |
          cd Terraform
          terraform init
          

      - name: Terraform Validate
        id: validate
        run: |
          cd Terraform          
          terraform validate -no-color
              
      - name: Terraform Plan
        id: plan
        run: |
          cd Terraform
          terraform plan -no-color -input=false
        continue-on-error: true
      - name: Terraform Apply
        run: |
          cd Terraform
          terraform apply -auto-approve -input=false
